using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class AsteroidManager : MonoBehaviour
{
    public float G = 6.674f;
    public Rigidbody OrbitalFocus;

    [SerializeField]
    public float MinDistance = 2000;
    [SerializeField]
    public float MaxDistance = 5000;
    [SerializeField]
    public float YRange = 100; 

    [SerializeField]
    public int HugeAsteroids;
    [SerializeField]
    public int MediumAsteroids;
    [SerializeField]
    public int SmallAsteroids;

    private string asteroid = "SpaceStone_";
    private string huge = "Huge_v";
    private string medium = "Medium_v";
    private string small = "Small_v";

    int cHuge = 0;
    int cMedium = 0;
    int cSmall = 0;

    // This is a list of ALLL the asteroids generated by the Manager
    List<GameObject> AsterList = new List<GameObject>();

    // This is a reference to the gameobject I am storing all the asteroid game objects under
    Transform AsteroidContainer;

    private void Awake()
    {
        // Set the reference to the asteroid container
        AsteroidContainer = GameObject.Find("Space Props/Asteroids").transform;
    }

    // How this works
    //  If the amount of huge/med/small asteroids is less than the amount requested, instantiate and place one each each frame update
    private void Update()
    {
        if (cHuge < HugeAsteroids)
        {
            // This instantiates a prefab using a randomized string path
            // All Huge Asteroid Prefabs are located at "SpaceStone_Huge_v" and then numbered 1 through 15
            // I am only grabbing 1 - 4, so I limit the draw calls and processor overhead for all those textures.
            GameObject HugeAss = GameObject.Instantiate(Resources.Load(asteroid + huge + Random.Range(1, 4).ToString())) as GameObject;
            // Place Asteroid in Asteroid Container
            HugeAss.transform.SetParent(AsteroidContainer);
            // Calculate an orbital position around the Orbital focus, and place asteroid there.
            HugeAss.transform.position = GetRandomOrbit();
            // Add the new asteroid to the main asteroid list
            AsterList.Add(HugeAss);
            // Increment the huge asteroid counter
            cHuge++;
        }
        if (cMedium < MediumAsteroids)
        {
            GameObject MedAss = GameObject.Instantiate(Resources.Load(asteroid + medium + Random.Range(1, 4).ToString())) as GameObject;
            MedAss.transform.SetParent(AsteroidContainer);
            MedAss.transform.position = GetRandomOrbit();
            AsterList.Add(MedAss);
            cMedium++;
        }
        if (cSmall < SmallAsteroids)
        {
            GameObject SmallAss = GameObject.Instantiate(Resources.Load(asteroid + small + Random.Range(1, 4).ToString())) as GameObject;
            SmallAss.transform.SetParent(AsteroidContainer);
            SmallAss.transform.position = GetRandomOrbit();
            AsterList.Add(SmallAss);
            cSmall++;
        }
    }

    Vector3 GetRandomOrbit()
    {
        // Get random distance from orbital focus as given by public variables
        float distance = Random.Range(MinDistance, MaxDistance);

        // Get the X coord from -distance to distance
        float X = Random.Range(-distance, distance);

        // Calculate Z coord from the X (this randomly chooses pos/neg value)
        float Z = (Random.value < 0.5) ? distance - Mathf.Abs(X) : -(distance - Mathf.Abs(X));

        // Get random Y coord from range
        float Y = Random.Range(-YRange, YRange);

        // Adjust coordinates to center around OrbitalFocus
        X += OrbitalFocus.transform.position.x;
        Y += OrbitalFocus.transform.position.y;
        Z += OrbitalFocus.transform.position.z;

        return new Vector3(X, Y, Z);
    }

}
